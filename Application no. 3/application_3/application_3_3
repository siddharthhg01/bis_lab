#Application
import numpy as np
import random

# Step 1: Define the Wireless Network Problem (cities and base stations)
class WirelessNetwork:
    def __init__(self, cities, max_base_stations=3):
        self.cities = cities
        self.n_cities = len(cities)
        self.max_base_stations = max_base_stations
        self.distances = self.compute_distances()

    def compute_distances(self):
        # Calculate Euclidean distance between cities (or locations for base stations)
        distances = np.zeros((self.n_cities, self.n_cities))
        for i in range(self.n_cities):
            for j in range(self.n_cities):
                if i != j:
                    distances[i, j] = np.linalg.norm(np.array(self.cities[i]) - np.array(self.cities[j]))
        return distances

# Step 2: Initialize Parameters
class AntColony:
    def __init__(self, network, n_ants=10, n_iterations=100, alpha=1, beta=5, rho=0.5, tau_initial=1.0):
        self.network = network
        self.n_ants = n_ants
        self.n_iterations = n_iterations
        self.alpha = alpha
        self.beta = beta
        self.rho = rho
        self.tau_initial = tau_initial
        self.pheromone = np.ones((self.network.n_cities, self.network.n_cities)) * self.tau_initial
        self.best_route = None
        self.best_cost = float('inf')

    def _compute_probabilities(self, current_city, visited_cities):
        # Compute probabilities of placing a base station in each city
        probabilities = []
        for i in range(self.network.n_cities):
            if i not in visited_cities:
                pheromone = self.pheromone[current_city, i] ** self.alpha
                heuristic = (1.0 / self.network.distances[current_city, i]) ** self.beta  # Maximize coverage
                probabilities.append(pheromone * heuristic)
            else:
                probabilities.append(0)
        total = sum(probabilities)
        return [p / total for p in probabilities]

    def _construct_solution(self):
        # Construct a solution by choosing cities to place base stations
        visited_cities = []
        total_cost = 0
        base_stations = 0
        while base_stations < self.network.max_base_stations:
            # Randomly start from a city or continue to the next
            if not visited_cities:
                current_city = random.randint(0, self.network.n_cities - 1)
                visited_cities.append(current_city)
                base_stations += 1
            else:
                current_city = visited_cities[-1]
            probabilities = self._compute_probabilities(current_city, visited_cities)
            next_city = random.choices(range(self.network.n_cities), probabilities)[0]
            visited_cities.append(next_city)
            base_stations += 1
            total_cost += self.network.distances[current_city, next_city]  # Add the distance as cost

        return visited_cities, total_cost

    def _update_pheromones(self, all_routes):
        # Update pheromones based on the solutions found
        self.pheromone *= (1 - self.rho)  # Apply evaporation
        for route, cost in all_routes:
            for i in range(len(route) - 1):
                self.pheromone[route[i], route[i + 1]] += 1.0 / cost
            self.pheromone[route[-1], route[0]] += 1.0 / cost  # Returning to start

    def run(self):
        for iteration in range(self.n_iterations):
            all_routes = []
            for _ in range(self.n_ants):
                route, cost = self._construct_solution()
                all_routes.append((route, cost))
                if cost < self.best_cost:
                    self.best_cost = cost
                    self.best_route = route
            self._update_pheromones(all_routes)
            print(f"Iteration {iteration + 1}/{self.n_iterations}, Best Cost: {self.best_cost}")
        return self.best_route, self.best_cost

# Step 3: Main Execution
if __name__ == "__main__":
    # Define cities (coordinates of cities)
    cities = [(0, 0), (1, 3), (3, 1), (4, 0), (6, 2), (7, 5)]
    
    # Define the network
    network = WirelessNetwork(cities, max_base_stations=3)
    
    # Create an ACO instance
    aco = AntColony(network, n_ants=10, n_iterations=100, alpha=1, beta=5, rho=0.5, tau_initial=1.0)
    
    # Run the algorithm
    best_route, best_cost = aco.run()
    
    # Output results
    print(f"Best Route for Base Stations: {best_route}")
    print(f"Total Cost: {best_cost}")
